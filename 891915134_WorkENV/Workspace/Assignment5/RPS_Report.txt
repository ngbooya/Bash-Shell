Kevin Nguyen
891915134

Assignment 5: RPS

-Start of the file must contain "#! /bash/bin" in order for bash script to execute.
-Use command "echo" prompt user to enter 1, 2, or 3(Rock, Paper, Scissors);
-Use command "read" to take in user input; User input is the variable "humanInput";
- Create timestamp for record of text file. 
	$(date "+%Y-%m-%d %H:%M:%S")
	-function $date will display system time. 
	- Y = year
	- m = month
	- d = date
	- H = hour of day
	- M = minute
	- S = seconds

-Define the variable to make record directory
	GAMEDIR = "RPS_"$(date +"%B_%Y")
		-This displays the month in text form and then the year.
-Use command "mkdir -p"; option -p creates a directory without the need of the full path.
	"mkdir -p $GAMEDIR"i

-Design of the program revolves around the comparison of each human input and random number generated by the system;
-Because there are only 3 valid options from human and system, there are only 9 if statements; but because we need a error handling statement, the last statement would be an else statement.  
-if statements would compare human input and system generated number. If condition matches, then it would echo out the result.
	Example:
	then echo "You played rock, I played paper. I WIN!" 
 	 echo "You have rock, I have paper. I WIN!__$TIMESTAMP" >> ./$GAMEDIR/Gameplay_$(date "+%B_%d_%a_%H:%M").out

	-For this example; the user has inputed ROCK and the system played a PAPER; system wins
	-The first echo prints the results on screen; the second echo prints results to the text file Gameplay_.....$(date.....).out
	-Because the $date function does not print second "%s"; we are able to print the results in the same text file within the same minute.

-The process above continues for all possible outcomes of the game; human wins, system wins, or tie game.
-Last statement would echo out Invalid input and would all record the error in the text files.
